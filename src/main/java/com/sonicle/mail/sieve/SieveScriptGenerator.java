/*
* WebTop Groupware is a bundle of WebTop Services developed by Sonicle S.r.l.
* Copyright (C) 2011 Sonicle S.r.l.
*
* This program is free software; you can redistribute it and/or modify it under
* the terms of the GNU Affero General Public License version 3 as published by
* the Free Software Foundation with the addition of the following permission
* added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
* WORK IN WHICH THE COPYRIGHT IS OWNED BY SONICLE, SONICLE DISCLAIMS THE
* WARRANTY OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
*
* This program is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
* FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
* details.
*
* You should have received a copy of the GNU Affero General Public License
* along with this program; if not, see http://www.gnu.org/licenses or write to
* the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
* MA 02110-1301 USA.
*
* You can contact Sonicle S.r.l. at email address sonicle@sonicle.com
*
* The interactive user interfaces in modified source and object code versions
* of this program must display Appropriate Legal Notices, as required under
* Section 5 of the GNU Affero General Public License version 3.
*
* In accordance with Section 7(b) of the GNU Affero General Public License
* version 3, these Appropriate Legal Notices must retain the display of the
* "Powered by Sonicle WebTop" logo. If the display of the logo is not reasonably
* feasible for technical reasons, the Appropriate Legal Notices must display
* the words "Powered by Sonicle WebTop".
*/

package com.sonicle.mail.sieve;

import java.util.ArrayList;

/**
 *
 * @author gbulfon
 */
public class SieveScriptGenerator implements MailFiltersParserListener {
	
	private static final int VERSION=3;

	StringBuffer sievescript=new StringBuffer();
	int rows=0;
	boolean firstIf=true;
	String spamFolder=null;
	boolean spamDone=false;

	public StringBuffer generate(MailFilters filters, String spamFolder) {
		rows=0;
		this.spamFolder=spamFolder;
		MailFiltersParser.parse(filters, this);
		return sievescript;
	}
	
	public static String getVersionComment() {
		return "# SieveScriptGenerator Version "+VERSION;
	}

	public void filtersStart() {
		sievescript.append("#\n");
		sievescript.append("# Generated by Sonicle WebTop Services [http://www.sonicle.com]\n");
		sievescript.append(getVersionComment()+"\n");
		sievescript.append("#\n");
		sievescript.append("require [\"fileinto\",\"vacation\",\"reject\"];\n\n");
		firstIf=true;
		if (spamFolder!=null) {
			sievescript.append("if exists \"X-Spam-Flag\" {\n");
			sievescript.append("    if header :contains \"X-Spam-Flag\" \"YES\" {\n");
			sievescript.append("        fileinto \"").append(spamFolder).append("\";\n");
			sievescript.append("        stop;\n");
			sievescript.append("    }\n");
			sievescript.append("}\n\n");
			//firstIf=false;
			spamDone=true;
		}
	}

	public void filter(int row, MailFilterConditions mfcs) {
		if (!mfcs.isEnabled()) return;

		//if auto spam filter done, skip if spam rule
		if (spamDone && isSpamRule(mfcs)) return;

		if (!firstIf) sievescript.append("els");
		sievescript.append("if ");
		firstIf=false;

		if (mfcs.getOperator().equals(MailFilterConditions.OPERATOR_OR)) sievescript.append("anyof");
		else sievescript.append("allof");
		sievescript.append(" (");

		int mfcssize=mfcs.size();
		for(int i=0;i<mfcssize;++i) {
			if (i>0) sievescript.append(", ");

			MailFilterCondition mfc=mfcs.get(i);
			String field=mfc.getField();
			if (field.equals("from")) {
				sievescript.append("header :comparator \"i;ascii-casemap\" :contains [\"from\",\"From\",\"FROM\"] ");
			} else if (field.equals("to")) {
				sievescript.append("header :comparator \"i;ascii-casemap\" :contains [\"cc\",\"Cc\",\"CC\",\"to\",\"To\",\"TO\"] ");
			} else if (field.equals("subject")) {
				sievescript.append("header :comparator \"i;ascii-casemap\" :contains [\"subject\",\"Subject\",\"SUBJECT\"] ");
			} else if (field.equals("size")) {
				String comparison="over";
				if (mfc.getComparison()==mfc.LESSTHAN) comparison="under";
				sievescript.append("size :"+comparison+" ");
			}
			ArrayList<String> values=mfc.getValues();
			int vsize=values.size();
			if (vsize>1) sievescript.append('[');
			for(int v=0;v<vsize;++v) {
				if (v>0) sievescript.append(',');
				String value=(String)values.get(v);
				sievescript.append('"');
				sievescript.append(value);
				sievescript.append('"');
			}
			if (vsize>1) sievescript.append(']');
		}
		sievescript.append(") {\n");

		if (mfcs.getAction().equals("FILE")) {
			sievescript.append("\tfileinto \"").append(mfcs.getActionValue()).append("\";\n");
		} else if (mfcs.getAction().equals("FORWARD")) {
			sievescript.append("\tredirect \"").append(mfcs.getActionValue()).append("\";\n");
		} else if (mfcs.getAction().equals("REJECT")) {
			sievescript.append("\treject text:\n");
			sievescript.append(mfcs.getActionValue());
			sievescript.append("\n.\n;\n");
		} else if (mfcs.getAction().equals("DISCARD")) {
			sievescript.append("\tdiscard;\n");
		}
		sievescript.append("}\n\n");
		++rows;
	}

	public void filtersEnd(int rows) {
		if (this.rows>0) {
			sievescript.append("else {\n\tkeep;\n}\n\n\n");
		}
	}

	public void vacation(boolean active, String message, String addresses) {
		if (!active) return;
		if (message!=null && message.trim().length()>0) {
		sievescript.append("vacation :days 1");
		if (addresses!=null && addresses.trim().length()>0) {
			sievescript.append(" :addresses [");
			String vaddresses[]=addresses.split(",\\s");
			for(int i=0;i<vaddresses.length;++i) {
			  if (vaddresses[i].trim().length()==0) continue;
			  if (i>0) sievescript.append(",");
			  sievescript.append('"');
			  sievescript.append(vaddresses[i]);
			  sievescript.append('"');
			}
			sievescript.append("]");
		}
		sievescript.append(" text:\n");
		sievescript.append(message);
		sievescript.append("\n.\n;\n\n\n");
		}
	}

	private boolean isSpamRule(MailFilterConditions mfcs) {
		boolean isSpamRule=false;

		if (mfcs.size()==1 && mfcs.action.equals("FILE") && mfcs.actionvalue!=null && spamFolder!=null && mfcs.actionvalue.equals(spamFolder)) {
			MailFilterCondition mfc=mfcs.get(0);
			if (mfc.field.equals("subject")) {
				if (mfc.values.size()==1) {
					String lvalue=mfc.values.get(0).toLowerCase();
					if (lvalue.contains("*spam*"))
						isSpamRule=true;
				}
			}
		}
		return isSpamRule;
	}
}
